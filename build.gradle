buildscript {
    apply from: "dependencies.gradle"
    apply from: "extras.gradle"
    repositories {
        google()
        jcenter()
        gradlePluginPortal()
        mavenCentral()
        maven {
            url 'https://maven.fabric.io/public'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.4'
        classpath "com.jakewharton:butterknife-gradle-plugin:$butterKnifeVersion"
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'io.fabric.tools:gradle:1.31.2'
        classpath "com.github.ben-manes:gradle-versions-plugin:0.27.0"
        classpath "com.squareup.sqldelight:gradle-plugin:$sqlDelightVersion"
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.0.0-RC16")
}

apply plugin: "com.github.ben-manes.versions"

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            url "https://maven.google.com"
        }
        maven {
            url 'http://storage.googleapis.com/r8-releases/raw'
        }
        maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
    }
    apply plugin: 'io.gitlab.arturbosch.detekt'
    dependencies{
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"
    }
}

detekt {
    toolVersion = detektPluginVersion
    input = files("src/main/kotlin")
    filters = ".*/resources/.*,.*/build/.*"
    config = files("detekt.yml")
}

ext {
    def values = loadValues()
    movieDBApiKey = values.getProperty('API_KEY')
    keyStorePass = values.getProperty('keyStorePass')
    aioAlias = values.getProperty('aioAlias')
    keyPass = values.getProperty('keyPass')
    keyStoreAddress = values.getProperty('keyStoreAddress')
    fabricAPIKey = values.getProperty('Fabric_API_KEY')
}

def loadValues() {
    Properties localProperties = new Properties()
    if (project.rootProject.file('local.properties').exists()) {
        localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    } else {
        localProperties.setProperty('API_KEY', System.getenv("API_KEY"))
        localProperties.setProperty('keyStorePass', System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD"))
        localProperties.setProperty('aioAlias', System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS"))
        localProperties.setProperty('keyPass', System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"))
        localProperties.setProperty('keyStoreAddress', System.getenv("HOME") + "/keystores/aio-key.jks")
        localProperties.setProperty('Fabric_API_KEY', System.getenv("Fabric_API_KEY"))
    }
    return localProperties
}